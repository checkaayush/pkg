run:
  timeout: 5m

output:
  sort-results: true

linters:
  disable-all: true
  enable:
    - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - forbidigo # forbids identifiers	matched by reg exps
    - gosimple # linter for Go source code that specializes in simplifying a code
    - misspell # finds commonly misspelled English words in comments
    - nakedret # finds naked returns in functions greater than a specified function length
    - nolintlint # reports ill-formed or insufficient nolint directives
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - stylecheck # a replacement for golint
    - unused # checks Go code for unused constants, variables, functions and types
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # detects when assignments to existing variables are not used
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - asciicheck # simple linter to check that your code does not contain non-ASCII identifiers
    - bodyclose # checks whether HTTP response body is closed successfully
    - durationcheck # check for two durations multiplied together
    - exportloopref # checks for pointers to enclosing loop variables
    - goimports # Goimports does everything that gofmt does. Additionally it checks unused imports
    - gosec # inspects source code for security problems
    - importas # enforces consistent import aliases
    - nilerr # finds the code that returns nil even if it checks that the error is not nil.
    - noctx # noctx finds sending http request without context.Context
    - unconvert # Remove unnecessary type conversions
    - wastedassign # wastedassign finds wasted assignment statements.

issues:
  exclude-rules:
    - linters:
      - staticcheck
      text: SA1019